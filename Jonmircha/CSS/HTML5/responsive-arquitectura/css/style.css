[class^="box"] {
	/* los que empiezen con. Esto caclulo que sirve si vamos a usar muchos box
  y vamos a ir direnciandolos tipo box-flex, box-grid-red */
	margin: 3rem auto;
	background-color: orangered;
}
/* Unidades fijas vs relativas */
.box {
	width: 300px;
	height: 300px;
}

.box-flexible {
	width: 50%;
	height: 20%; /* para que esto ande el contenedor padre debe de tener una medida establecida y fija */
	height: 20vh;
}
.box-flexible-2 {
	max-width: 960px; /* es como que el max intenta tenerlo a toda costa, reuciendo el margin por EJ
  mientas que con medidas relativas se ajustan a la pantalla y desde que la achico un poquito ya se achico
  el conteiner. Con los max tengo que romper el limite o se quedan fijos */
	min-width: 280px; /* si achico la pagina veo el efecto pero con height neceito tener contenido */
	max-height: 480px;
	min-height: 280px;
	/* despues de agregarle 5 lorems el contenedor crecio del minimo a lo que necesito y ahora mientras
  achico la pantalla en x las letras se van llendo para abajo y el height va creciendo */
}
.box-flexible-3 {
	/* display: inline; */
	height: 20vh; /* si solo pongo el height, mi caja ocupa el 100% default */
	/* AHH: el valor default de width es auto. En verdad no es que ocupa el 100%.
  Depende de si es inline o block. Si es block ocupa todo el width y si es inline depende del contenido */
	/* practicamente hice una caja responsiva con un height nada mas xd */
	/* min-height: ; */ /* adopta ese valor */
	/* max-height: ; */ /*no tiene ningun valor, necesita, un minimo o una medida relativa  */
	/* min-width: ; */ /*  */
	/* min-width: 100px; */ /* no adopta el valor, necesita un maximo. Si es inline tampoco adopta el valor ya que no lo neceista si no tiene contenido */
	/* max-width: 100px; */ /* adopta ese valor. Me acorde que a los inline no les afecta el width jaja */
}
.box-flexible-4 {
	max-width: 960px;
	min-width: 280px;
	max-height: 480px;
	min-height: 280px;
	/* mayor jerarquía. Ni siquiera respetan el min que si generaria interferencia(por que es medida fija) */
	width: 300px;
	height: 300px;
	/* a la caja le chupa un huevo los min y max */
}
.box-flexible-5 {
	max-width: 960px;
	min-width: 280px;
	max-height: 480px;
	min-height: 280px;
	/* antes con unidades fijas y ahora con relativas */
	width: 50%;
	height: 20vh;
	/* medio un mareo esto. Tipo pongo un max y un min, ya poner un witdh tmb es un lio. O puedo
  tmb poner un width con un clamp. Creo que un clamp es esto xd, los 3 valores */
	/* si pongo 2 cajas con width 50% pero una con minx-max. Se portan absolutamente igual
  hasta que una llega a los limites */
}
/* para hacer responsive los archivos multimedia hacemos */
img,
audio,
video,
iframe,
canvas,
svg,
picture {
	max-width: 100%;
	height: auto; /* no se para que. no es default? */
}
.responsive-media {
	position: relative;
	max-width: 100%;
	height: 0;
	/* Formato widescreen 16:9
  16 --->100%
  9 --->56.25% */
	padding-bottom: 56.25%;
}
.responsive-media > * {
	position: absolute;
	width: 100%;
	height: 100%;
}
.aspect-radio-16-9 {
	background-color: rebeccapurple;
	aspect-ratio: 16 / 9;
}
.aspect-radio-1-1 {
	aspect-ratio: 1/ 1; /*  es este caso el mapa era muy chiquito y lo hicimos cuadrado */
}
/* par no crar una hoja con media print */
@media print {
	@page {
		/* landscape  |  apaisado */
		size: A6 landscape; /* el A6 fue echo para que sea vertical */
		size: A4 landscape;
	}
	body {
		font-size: 48pt;
		font-size: 16pt; /* las unidades de medida del word, los pt */
		font-family: serif;
		background-color: black; /* no cambia */
		color: greenyellow;
	}
}
@media screen and (prefers-reduced-motion: no-preference) {
	/* no-preference  =  default */
	html {
		scroll-behavior: auto;
	}
}
@media screen and (prefers-color-scheme: light) {
	/* es la opcion del navegador de si preferis el navegador oscuro o blanco */
	body {
		background-color: lightblue;
		background-color: white;
	}
}
@media screen and (prefers-color-scheme: dark) {
	/* como ya que está me cambie a dark, voy a poner white xd */
	body {
		background-color: black;
		background-color: white;
	}
} /* como que esto de los prefers son configuraciones del usuario en el navegador, que prefiere */
@media screen and (prefers-color-scheme: no-preference) {
	/* es la opcion del navegador de si preferis el navegador oscuro o blanco */
	body {
		background-color: lightblue;
		/* background-color: white; */
	}
}
/* si trabajamos con min width es porque priorisamos el Mobile First porque min-width es lo minimo
y significa que es del valor que damos hacia arriba */
@media screen and (min-width: 480px) {
	html {
		background-color: lightpink;
	}
}
/* Cuando usamos max es porque priorisamos Desktop First. El valor que le damos hacia abajo */
@media screen and (max-width: 1024px) {
	html {
		background-color: lightgreen;
	}
} /* fuera de las condiciones. Esta tiene prioridad por cascada. Si las 2 se cumplen.
SI usamos min y max vamos a tener estos problemas o sea que hay que hacer Desktop o Mobile first */
@media screen and (min-width: 1200px) {
	html {
		background-color: white;
	}
}
/* Breakpoints: es la medida de la media, como el punto donde la media de se rompe
Es mala practica usar media queries con px, lo mejor es usar em porque el usuario puede configurar
el tamaño de la letra que quiere en su navegador y en ese caso eso nos puede romper la pagina.
Imaginate que tengo tod alineado justito y cae un chabon con 30px de font.size
Pixeles de pantalla / pixeles que usamos = em 
EJ: 1200px / 16px = 75em */

/* acá vimos el archivo de grid.css */

@supports (grid-template-columns: subgrid) {
	/* Si el navegador lo soporta lo ejecuta, sino no. Justo esta solo la soporta el firefox */
	html {
		background-color: black;
		color: brown; /* en firefox si cambia*/
	}
}
@supports not (grid-template-columns: subgrid) {
	/* si NO lo soporta */
	html {
		background-color: crimson;
		color: burlywood;
	}
} /* estos 2 sirven una banda para fijarse si anda o no */
@supports (display: grid) and (grid-template-columns: subgrid) {
	/* 2 condiciones */
	html {
		background-color: antiquewhite;
		color: green;
	}
}
@supports (display: grid) or (grid-template-columns: subgrid) {
	/* uno de los 2 */
	html {
		background-color: darkslateblue;
		color: black;
	}
}
/* si vas a tu navegador podes ir a edge://flags/  esto esta en todos los navegadores y podemos activar opciones experimentales */
.card {
	border: thin solid black;
	margin: auto;
	max-width: 800px;
	contain: layout inline-size style;
}
.card-image {
	max-width: 100%;
	height: auto;
	object-fit: cover;
	object-position: 0 50%;
}
.card-content {
	padding: 1rem;
}
.sup-test {
	display: none;
}
@supports not (contain: layout inline-size style) {
	/* acá está bueno porque aviso que no soporta pero si soporta no se ve. O sea si uso esta propiedad
  que solo la soporta un navegador y activando los flags, no me combiene. Pero si me anda en todos menos en 1
  ahi si que lo puedo usar */
	.sup-test {
		display: initial;
	}
	.sup-test::after {
		content: "no soporta";
		color: red;
		display: initial;
	}
}
@container (min-width: 600px) {
	.card-conteiner {
		display: flex;
	}
	.card-conteiner > * {
		width: 50%;
		flex-basis: 50%;
	}
} /* no anda */
.fluid-grid {
	display: grid;
	grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
}
.fluid-item {
	border: thin solid gray;
	padding: 1rem;
}
/* el link de fluid type calculator */
/* @link https://utopia.fyi/type/calculator?c=320,21,1.2,1140,24,1.25,5,2,&s=0.75|0.5|0.25,1.5|2|3|4|6,s-l */

:root {
	--step--2: clamp(0.91rem, calc(0.89rem + 0.1vw), 0.96rem);
	--step--1: clamp(1.09rem, calc(1.05rem + 0.21vw), 1.2rem);
	--step-0: clamp(1.31rem, calc(1.24rem + 0.37vw), 1.5rem);
	--step-1: clamp(1.58rem, calc(1.46rem + 0.59vw), 1.88rem);
	--step-2: clamp(1.89rem, calc(1.71rem + 0.89vw), 2.34rem);
	--step-3: clamp(2.27rem, calc(2.01rem + 1.29vw), 2.93rem);
	--step-4: clamp(2.72rem, calc(2.36rem + 1.83vw), 3.66rem);
	--step-5: clamp(3.27rem, calc(2.75rem + 2.56vw), 4.58rem);
}
.step--2 {
	/* -2 */
	font-size: var(--step--2);
}
.step--1 {
	font-size: var(--step--1);
}
.step-0 {
	/* simula el h6 */
	font-size: var(--step-0);
}
.step-1 {
	/* h5 */
	font-size: var(--step-1);
}
.step-2 {
	/* h4 */
	font-size: var(--step-2);
}
.step-3 {
	font-size: var(--step-3);
}
.step-4 {
	font-size: var(--step-4);
}
.step-5 {
	font-size: var(--step-5);
}
.comparasion {
	display: grid;
	grid-template-columns: repeat(2, 50%);
}
.comparasion-cont-1 {
	border: thin solid black;
}
.comparasion-cont-2 {
	border: thin solid black;
}
.comparasion-1 {
	font-size: 15.36px;
}
.comparasion-2 {
	font-size: 24px;
}
.comparasion-3 {
	font-size: 19.2px;
}
.comparasion-4 {
	font-size: 30.08px;
}
.comparasion-5 {
	font-size: 37.44px;
}
.comparasion-6 {
	font-size: 46.88px;
}
.comparasion-7 {
	font-size: 58.56px;
}
.comparasion-8 {
	font-size: 73.28px;
}
.body {
	/* deshacer la clase para ver */
	/* 
14 = tamaño de letra mas pequeñi
18 = tamaño de letra mas grande
300 = tamaño de viewport mas pequeño
1400 = tamaño de viewport mas grande
*/
	font-size: calc(14px + (18-14) * ((100vw - 300px) / (1400 - 300)));
	font-size: calc(14px + (16-14) * ((100vw - 300px) / (1920 - 300)));
}
.box-fluid {
	height: 300px;
	width: 300px;
	height: clamp(200px, 30vw, 300px);
	width: clamp(400px, 60vw, 600px);
	margin-bottom: 20px;
}
.test1 {
	color: red;
}
.test2 {
	color: blue;
}
